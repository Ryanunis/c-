//利用sort进行升序排列和降序排列
sort(nums.begin(),nums.end())//默认升序排列
sort(nums.begin(),nums.end(),greater<int>())//调用greater函数进行降序排列
nums.size()//代表数组长度

set<int> s1;//这是一个集合
vector<int> s2;//这是一个向量
s2.push_back(x);//向量用push
s1.insert(x);//集合为insert并自动进行排列和去重


void findsaddlepoints(vector<vector<int>>& matrix,int n,int m)
形如上方的函数传递参数时
形参往往设置为vector<int>& matrix而不是vector<int> matrix
主要是因为要避免不必要的拷贝，提高程序的性能
1.	避免不必要的拷贝：
	•	当函数参数是 vector<int> nums 时，会创建一个新的 vector<int> 对象并将传入的 vector<int> 的内容拷贝到新的对象中。这会产生额外的时间和空间开销，尤其是在传入的 vector<int> 很大的情况下。
	•	使用 vector<int>& nums 表示传入的是一个引用，这样就不会创建新的对象，只是传递一个对原对象的引用，避免了不必要的拷贝，节省了时间和空间。
2.	提高性能：
	•	由于避免了不必要的拷贝，函数的执行速度会更快，内存使用也会更少。这对于性能要求较高的应用程序特别重要。
3.	直接操作原数据：
	•	引用允许函数直接操作传入的 vector<int> 对象。如果需要在函数内对传入的 vector<int> 进行修改，使用引用可以直接反映在原数据上，而不需要返回并赋值。
4.	一致性：
	•	在很多情况下，使用引用是 C++ 的惯用做法，这样代码更易读且符合习惯。


substr函数
原型
string substr (size_t pos = 0, size_t len = npos) const;
//substr函数获取了字符串 pos 位置开始、
//长度为 len 的子串，并将其作为返回值返回。

//size_t 是一种无符号整数类型，主要用于表示对象的大小或数组的索引。它由标准库定义，具体实现因平台而异，
//但始终是无符号的，以确保能够正确表示内存大小和索引范围。使用 size_t 可以提高代码的可移植性和安全性。


sort函数
主要有两种形式
1默认排序
template <class RandomIt>
void sort(RandomIt first, RandomIt last);
（按照升序对元素进行排序）
2自定义比较函数的类型
template <class RandomIt, class Compare>
void sort(RandomIt first, RandomIt last, Compare comp);

对自定义比较函数进行详细说明
1普通函数
bool compare(const Student &a, const Student &b) {
    if (a.total != b.total)
        return a.total < b.total;
    return a.id < b.id;
}

std::sort(students.begin(), students.end(), compare);
2函数对象（仿函数）
struct Compare {
    bool operator()(const Student &a, const Student &b) {
        if (a.total != b.total)
            return a.total < b.total;
        return a.id < b.id;
    }
};

std::sort(students.begin(), students.end(), Compare());
3Lambda函数
std::sort(students.begin(), students.end(), [](const Student &a, const Student &b) {
    if (a.total != b.total)
        return a.total < b.total;
    return a.id < b.id;
});



























