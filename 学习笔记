//利用sort进行升序排列和降序排列
sort(nums.begin(),nums.end())//默认升序排列
sort(nums.begin(),nums.end(),greater<int>())//调用greater函数进行降序排列
nums.size()//代表数组长度

set<int> s1;//这是一个集合
vector<int> s2;//这是一个向量
s2.push_back(x);//向量用push
s1.insert(x);//集合为insert并自动进行排列和去重


void findsaddlepoints(vector<vector<int>>& matrix,int n,int m)
形如上方的函数传递参数时
形参往往设置为vector<int>& matrix而不是vector<int> matrix
主要是因为要避免不必要的拷贝，提高程序的性能
1.	避免不必要的拷贝：
	•	当函数参数是 vector<int> nums 时，会创建一个新的 vector<int> 对象并将传入的 vector<int> 的内容拷贝到新的对象中。这会产生额外的时间和空间开销，尤其是在传入的 vector<int> 很大的情况下。
	•	使用 vector<int>& nums 表示传入的是一个引用，这样就不会创建新的对象，只是传递一个对原对象的引用，避免了不必要的拷贝，节省了时间和空间。
2.	提高性能：
	•	由于避免了不必要的拷贝，函数的执行速度会更快，内存使用也会更少。这对于性能要求较高的应用程序特别重要。
3.	直接操作原数据：
	•	引用允许函数直接操作传入的 vector<int> 对象。如果需要在函数内对传入的 vector<int> 进行修改，使用引用可以直接反映在原数据上，而不需要返回并赋值。
4.	一致性：
	•	在很多情况下，使用引用是 C++ 的惯用做法，这样代码更易读且符合习惯。


substr函数
原型
string substr (size_t pos = 0, size_t len = npos) const;
//substr函数获取了字符串 pos 位置开始、
//长度为 len 的子串，并将其作为返回值返回。

//size_t 是一种无符号整数类型，主要用于表示对象的大小或数组的索引。它由标准库定义，具体实现因平台而异，
//但始终是无符号的，以确保能够正确表示内存大小和索引范围。使用 size_t 可以提高代码的可移植性和安全性。


sort函数
主要有两种形式
1默认排序
template <class RandomIt>
void sort(RandomIt first, RandomIt last);
（按照升序对元素进行排序）
2自定义比较函数的类型
template <class RandomIt, class Compare>
void sort(RandomIt first, RandomIt last, Compare comp);

对自定义比较函数进行详细说明
1普通函数
bool compare(const Student &a, const Student &b) {
    if (a.total != b.total)
        return a.total < b.total;
    return a.id < b.id;
}

std::sort(students.begin(), students.end(), compare);
2函数对象（仿函数）
struct Compare {
    bool operator()(const Student &a, const Student &b) {
        if (a.total != b.total)
            return a.total < b.total;
        return a.id < b.id;
    }
};

std::sort(students.begin(), students.end(), Compare());
3Lambda函数
std::sort(students.begin(), students.end(), [](const Student &a, const Student &b) {
    if (a.total != b.total)
        return a.total < b.total;
    return a.id < b.id;
});





`emplace_back` 是 C++11 引入的一种 STL 容器方法，特别是用于 `std::vector` 等容器中。它的作用是直接在容器的末尾构造元素，相比于 `push_back`，它减少了不必要的拷贝或移动操作，提高了性能。

### `emplace_back` 与 `push_back` 的区别
- `push_back`: 向容器末尾添加一个元素。需要传递一个已经构造好的对象，如果传递的是临时对象，会涉及拷贝或移动构造。
- `emplace_back`: 直接在容器末尾原地构造元素。它可以接受构造函数的参数，直接在容器内存中构造对象，避免了额外的拷贝或移动操作。

### 示例
假设我们有一个 `Student` 结构体：

```cpp
struct Student {
    int id;
    std::string name;
    int math;
    int english;
    int chinese;
    int total;
    int rank;

    Student(int id, std::string name, int math, int english, int chinese)
        : id(id), name(name), math(math), english(english), chinese(chinese) {
        total = math + english + chinese;
    }
};
```

我们希望将多个 `Student` 对象添加到一个 `std::vector` 中：
#### 使用 `push_back`
```cpp
std::vector<Student> students;
Student s(1, "John", 90, 85, 95);
students.push_back(s);  // 需要拷贝或移动构造 s 对象
```

#### 使用 `emplace_back`

```cpp
std::vector<Student> students;
students.emplace_back(1, "John", 90, 85, 95);  // 直接在 vector 内存中构造 Student 对象
```
### 详细解释

1. **添加元素**:
    ```cpp
    students.emplace_back(id, name, math, english, chinese);
    ```
    - 使用 `emplace_back` 将每个学生直接构造到 `students` 向量的末尾。这避免了构造临时对象再拷贝或移动到向量中的开销。

2. **排序和输出**:
    - 使用 `std::sort` 对学生进行排序，并输出排名结果。使用 `std::setw` 确保输出对齐。

### 性能优势

- **减少拷贝**:
  `emplace_back` 直接在容器内存中构造元素，避免了多余的拷贝或移动操作，从而提高性能。
  
- **简化代码**:
  直接传递构造函数参数，代码更加简洁直观。

综上所述，`emplace_back` 提供了一种高效的方式在容器末尾直接构造元素，在性能和代码可读性方面都优于 `push_back`。






multiset 是 C++ 标准模板库 (STL) 中的一种关联容器，它与 set 类似，但允许存储多个相同的元素。multiset 按照元素的键值自动排序，每个键值可以重复出现。
下面是一些 multiset 的主要特点和用法：
主要特点
	1.	自动排序：multiset 中的元素总是按键值升序排列。
	2.	允许重复：multiset 可以包含多个相同的元素。
	3.	底层实现：通常基于平衡二叉树（如红黑树），因此插入、删除、查找操作的时间复杂度为 O(log n)。
基本操作
	•	插入元素：insert 方法插入元素，允许重复。
	•	删除元素：erase 方法删除指定元素或特定位置的元素。
	•	查找元素：find 方法查找元素，返回一个迭代器。
	•	计数元素：count 方法返回指定元素的个数。
1.	multiset<char> letters1(group1.begin(), group1.end()); 创建一个 multiset，将 group1 中的所有字母插入 letters1 中。
2.	multiset<char> letters2(group2.begin(), group2.end()); 同样地，将 group2 中的所有字母插入 letters2 中。
letters2.count(c) 返回字母 c 在 letters2 中的出现次数。



unique函数
unique 是 C++ 标准库 <algorithm> 头文件中的一个函数，用于移除容器（通常是一个数组或向量）中相邻的重复元素。它不会真正删除元素，而是将不重复的元素移到前面，并返回一个新的结束迭代器，这个迭代器指向移除重复元素后的新逻辑结尾。
unique 的工作原理
unique 函数会对给定范围内的元素进行操作，将相邻的重复元素移除，使得每个元素只出现一次。
unique 仅仅将不重复的元素移到前面，并返回新的逻辑结束位置，它并不改变容器的实际大小。如果想要真正删除重复元素，需要配合 erase 一起使用。
sorted_arr.erase(std::unique(sorted_arr.begin(), sorted_arr.end()), sorted_arr.end());













