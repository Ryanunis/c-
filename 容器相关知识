unordered_map
是 C++ 标准库中的一个容器类，位于 `<unordered_map>` 头文件中。它提供了一个关联式容器，允许你存储键值对，并能通过键高效地查找对应的值。
它使用哈希表实现，因此提供了平均时间复杂度为 O(1) 的插入、删除和查找操作。

主要特性
- **键值对存储**：`unordered_map` 存储键值对（key-value pairs），每个键都是唯一的，键和值可以是任意类型。
- **哈希表实现**：内部使用哈希表来管理元素，因此操作的平均时间复杂度为常数时间 O(1)。
- **无序性**：`unordered_map` 不保证元素的顺序，元素的顺序可能和插入顺序不同。

### 常用操作
1. 插入元素
   - 使用 `insert` 函数或下标操作符 `[]` 来插入键值对。
   ```cpp
   std::unordered_map<int, std::string> umap;
   umap[1] = "one"; // 插入键值对 (1, "one")
   umap.insert({2, "two"}); // 插入键值对 (2, "two")
   ```
2. 访问元素
   - 使用下标操作符 `[]` 或 `at` 方法访问值。
   ```cpp
   std::string value1 = umap[1]; // 访问键 1 对应的值
   std::string value2 = umap.at(2); // 访问键 2 对应的值
   ```
3. 检查元素是否存在
   - 使用 `find` 方法查找键，或使用 `count` 方法检查键是否存在。
   ```cpp
   if (umap.find(1) != umap.end()) {
       // 键 1 存在
   }
   if (umap.count(2) > 0) {
       // 键 2 存在
   }
   ```
4. 删除元素
   - 使用 `erase` 方法通过键或迭代器删除元素。
   ```cpp
   umap.erase(1); // 删除键 1 的元素
   ```
5. 遍历元素
   - 使用范围 `for` 循环或迭代器遍历 `unordered_map` 中的所有元素。
   ```cpp
   for (const auto& pair : umap) {
       std::cout << pair.first << ": " << pair.second << std::endl;
   }
   ```

示例
#include <iostream>
#include <vector>
#include <algorithm>
#include <unordered_map>

using namespace std;

int main() {
    int n;
    cin >> n;
    vector<int> arr(n);
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    vector<int> sorted_arr = arr;
    sort(sorted_arr.begin(), sorted_arr.end());
    sorted_arr.erase(unique(sorted_arr.begin(), sorted_arr.end()), sorted_arr.end());

    unordered_map<int, int> rank_map;
    for (int i = 0; i < sorted_arr.size(); i++) {
        rank_map[sorted_arr[i]] = i + 1;
    }

    for (int i = 0; i < n; i++) {
        cout << rank_map[arr[i]] << " ";
    }
    cout << endl;

    return 0;
}

假设输入为
7
-3 75 51 90 1118 51 -3
结果为
1 3 2 4 5 2 1






multiset
multiset 是 C++ 标准模板库 (STL) 中的一种关联容器，它与 set 类似，但允许存储多个相同的元素。multiset 按照元素的键值自动排序，每个键值可以重复出现。
下面是一些 multiset 的主要特点和用法：
主要特点
	1.	自动排序：multiset 中的元素总是按键值升序排列。
	2.	允许重复：multiset 可以包含多个相同的元素。
	3.	底层实现：通常基于平衡二叉树（如红黑树），因此插入、删除、查找操作的时间复杂度为 O(log n)。
基本操作
	•	插入元素：insert 方法插入元素，允许重复。
	•	删除元素：erase 方法删除指定元素或特定位置的元素。
	•	查找元素：find 方法查找元素，返回一个迭代器。
	•	计数元素：count 方法返回指定元素的个数。
1.	multiset<char> letters1(group1.begin(), group1.end()); 创建一个 multiset，将 group1 中的所有字母插入 letters1 中。
2.	multiset<char> letters2(group2.begin(), group2.end()); 同样地，将 group2 中的所有字母插入 letters2 中。
letters2.count(c) 返回字母 c 在 letters2 中的出现次数。

